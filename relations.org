#+name: license-preamble
#+begin_src lisp :exports none 
;;;; Set interface based on lists.
;;;; Copyright (C) 2018 Pieter Hijma

;;;; This program is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.

;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.

;;;; You should have received a copy of the GNU General Public License
;;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.
#+end_src


#+property: header-args :comments link :tangle-mode (identity #o400) :results output silent :mkdirp yes

* Relations
  :PROPERTIES:
  :header-args+: :package ":simple-sets"
  :header-args+: :tangle "system/main/relations.lisp"
  :END:

#+begin_src lisp :exports none :noweb yes
<<license-preamble>>

(in-package :simple-sets)
#+end_src

Relations form a small extension to sets.  It is simply a tuple that is
represented by a ~cons~ that is added to a set.  Again, it is necessary to
provide a ~test~ function.

#+begin_src lisp
(defclass simple-relation (simple-set) ())

(defun make-relation (&key (test #'equal))
  "Make a relation with test function test that is #'equal by default."
  (make-instance 'simple-relation :test test))
#+end_src

We defined the following generic functions on relations:

#+begin_src lisp
(defgeneric add-to-rel (a b relation)
  (:documentation "Make a tuple of a and b and add it to the relation."))
(defgeneric add-tuple-to-rel (tuple relation)
  (:documentation "Add tuple to the relation."))
(defgeneric subscribe-rel (key relation)
  (:documentation "Get the set of values that relate to key."))
#+end_src

The implementation:

#+begin_src lisp
(defmethod add-to-rel (a b (relation simple-relation))
  (add-tuple-to-rel (cons a b) relation))

(defmethod add-tuple-to-rel (tuple (relation simple-relation))
  (add-to-set tuple relation))

(defmethod subscribe-rel (key (relation simple-relation))
  (with-slots (elements test) relation
    (let ((set (make-set :test test)))
      (add-all-to-set
       (mapcar #'cdr 
	       (remove-if (complement #'(lambda (x) (funcall test (car x) key))) elements)) set)
      set)))
#+end_src

* Testing relations
  :PROPERTIES:
  :header-args+: :package ":test-simple-sets"
  :header-args+: :tangle "system/test/test-relations.lisp"
  :END:

#+begin_src lisp :noweb yes :exports none
<<license-preamble>>

(in-package :test-simple-sets)
#+end_src


#+begin_src lisp
(in-suite simple-sets)

(test subscription
  (let ((relation (make-relation))
	(result (make-set :test #'equal)))
    (add-to-rel 1 2 relation)
    (add-tuple-to-rel '(1 . 3) relation)
    (add-to-rel 2 4 relation)
    (add-to-set 3 result)
    (add-to-set 2 result)
    (is (set= (subscribe-rel 1 relation) result))))
#+end_src
